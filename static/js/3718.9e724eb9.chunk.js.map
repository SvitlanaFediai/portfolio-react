{"version":3,"file":"static/js/3718.9e724eb9.chunk.js","mappings":"4KAEA,MAAMA,EAAc,+FACb,MAAMC,EACTC,cACIC,KAAKC,gBAAkB,IAAIC,GAC/B,CACAC,UACI,IAAK,MAAOC,EAAKC,KAAcL,KAAKC,gBAC5BI,aAAqBC,cACZ,OAATD,QAAS,IAATA,GAAAA,EAAWE,QACXP,KAAKC,gBAAgBO,OAAOJ,GAGxC,CACAK,WAAWC,GACP,MAAM,UAAEC,SAAoB,+BAC5BA,EAAUD,EACd,CACAD,WAAWG,GACP,MAAMC,EAAUD,EAAUE,cAC1B,IAAKC,EAAAA,EAAAA,MAAiBC,IAAMC,EAAAA,EAAAA,IAAUD,EAAGH,EAAQK,UAAUC,MAAMC,QAC7D,OAEJ,MAAMC,EAAW,EAACC,EAAAA,EAAAA,IAASzB,IAAe0B,EAAeR,EAAAA,EAAAA,KAC/CC,GAAMH,EAAQK,UAAUC,MAAMN,QAAQG,KAC3CQ,MAAMR,KAAQA,IACfO,IACAE,EAAAA,EAAAA,IAA0BF,GAAeJ,IACjCA,EAAMO,MACNL,EAASM,MAAKL,EAAAA,EAAAA,IAASH,EAAMO,MACjC,UAGFE,QAAQC,IAAIR,EACtB,CACAS,gBAAgBC,UACLA,EAAS1B,SACpB,CACAI,mBAAmBG,EAAWmB,GAAU,IAAAC,EACpC,MAAkBC,EAAYF,EAASE,UACvC,GAAc,OAATA,QAAS,IAATA,IAAAA,EAAWC,MACZ,OAEJ,MAAMC,GAAQC,EAAAA,EAAAA,IAAyBH,EAAUC,MAAOH,EAASM,iBAAkBX,EAAqB,QAAjBM,EAAGC,EAAUP,YAAI,IAAAM,EAAAA,EAAInC,EAC5G,IAAKsC,EACD,OAEJ,MAAM/B,EAAM,GAAHkC,OAAMH,EAAK,KAAAG,OAAIZ,GAAQa,EAAevC,KAAKC,gBAAgBuC,IAAIpC,GACxE,GAAImC,EAEA,YADAR,EAAS1B,UAAYkC,GAGzB,MAAME,EAbS,GAaIC,EAAAA,EAAAA,IAAYX,EAASY,KAAKT,OAC7C,IAAI7B,EACJ,MAAMuC,GAAUF,EAAAA,EAAAA,IAAYX,EAASY,KAAKT,OAC1C,GAA+B,qBAApBW,gBAAiC,CACxC,MAAMC,EAAS,IAAID,gBAAgBJ,EAAYA,GAAaM,EAAUD,EAAOE,WAAW,MACxF,IAAKD,EACD,OAEJA,EAAQrB,KAAO,OAAHY,OArBD,EAqBWM,EAAgB,OAAAN,OAAMZ,GAC5CqB,EAAQE,aAAe,SACvBF,EAAQG,UAAY,SACpBH,EAAQI,SAAShB,EAAOS,EAASA,GACjCvC,EAAYyC,EAAOM,uBACvB,KACK,CACD,MAAMN,EAASO,SAASC,cAAc,UACtCR,EAAOS,MAAQd,EACfK,EAAOU,OAASf,EAChB,MAAMM,EAAUD,EAAOE,WAAW,MAClC,IAAKD,EACD,OAEJA,EAAQrB,KAAO,OAAHY,OAnCD,EAmCWM,EAAgB,OAAAN,OAAMZ,GAC5CqB,EAAQE,aAAe,SACvBF,EAAQG,UAAY,SACpBH,EAAQI,SAAShB,EAAOS,EAASA,GACjCvC,EAAYyC,CAChB,CACA9C,KAAKC,gBAAgBwD,IAAIrD,EAAKC,GAC9B0B,EAAS1B,UAAYA,QACfuB,QAAQ8B,SAClB,E","sources":["../node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    async draw(data) {\n        const { drawEmoji } = await import(\"./Utils.js\");\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    async particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n        await Promise.resolve();\n    }\n}\n"],"names":["defaultFont","EmojiDrawer","constructor","this","_emojiShapeDict","Map","destroy","key","emojiData","ImageBitmap","close","delete","async","data","drawEmoji","container","options","actualOptions","validTypes","t","isInArray","particles","shape","type","promises","loadFont","shapeOptions","find","executeOnSingleOrMultiple","font","push","Promise","all","particleDestroy","particle","_shapeData$font","shapeData","value","emoji","itemFromSingleOrMultiple","randomIndexData","concat","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","context","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set","resolve"],"sourceRoot":""}