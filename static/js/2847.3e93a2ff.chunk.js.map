{"version":3,"file":"static/js/2847.3e93a2ff.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-image/browser/ImageDrawer.js"],"sourcesContent":["import { errorPrefix } from \"@tsparticles/engine\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    async draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const { drawGif } = await import(\"./GifUtils/Utils.js\");\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    async loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            await this.loadImageShape(imageData);\n            await this.loadShape(particle);\n        }\n    }\n    async particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                void this.particleInit(container, particle);\n            });\n            return;\n        }\n        let imageRes;\n        if (image.svgData && color) {\n            const { replaceImageColor } = await import(\"./Utils.js\");\n            imageRes = await replaceImageColor(image, imageData, color, particle);\n        }\n        else {\n            imageRes = {\n                color,\n                data: image,\n                element: image.element,\n                gif: image.gif,\n                gifData: image.gifData,\n                gifLoopCount: image.gifLoopCount,\n                loaded: true,\n                ratio: imageData.width && imageData.height\n                    ? imageData.width / imageData.height\n                    : image.ratio ?? defaultRatio,\n                replaceColor: replaceColor,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n            image: imageRes,\n            fill,\n            close,\n        };\n        particle.image = imageShape.image;\n        particle.shapeFill = imageShape.fill;\n        particle.shapeClose = imageShape.close;\n    }\n}\n"],"names":["ImageDrawer","constructor","engine","this","loadImageShape","async","_imageShape$replaceCo","_engine","loadImage","Error","concat","errorPrefix","gif","imageShape","name","replaceColor","src","addImage","image","images","push","data","context","radius","particle","opacity","element","globalAlpha","gifData","drawGif","ratio","pos","x","y","diameter","drawImage","getSidesCount","container","options","actualOptions","preload","imageData","shape","shapeData","find","t","source","loadShape","_imageData$replaceCol","_imageData$fill","_imageData$close","color","getFillColor","loading","setTimeout","particleInit","imageRes","svgData","replaceImageColor","_image$ratio","gifLoopCount","loaded","width","height","fill","shapeFill","close","shapeClose"],"sourceRoot":""}