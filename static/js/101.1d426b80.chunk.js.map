{"version":3,"file":"static/js/101.1d426b80.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { Vector, Vector3d } from \"./Utils/Vectors.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, degToRad, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { errorPrefix, millisecondsToSeconds } from \"./Utils/Constants.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nconst defaultRetryCount = 0, double = 2, half = 0.5, squareExp = 2;\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * double;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, container) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = defaultRetryCount) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                const increment = 1;\n                return this._calcPosition(container, undefined, zIndex, tryCount + increment);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = degToRad(getRangeValue(moveOptions.angle.value)), radOffset = degToRad(getRangeValue(moveOptions.angle.offset)), range = {\n                left: radOffset - rad * half,\n                right: radOffset + rad * half,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = defaultRetryCount) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries, minRetries = 0;\n            if (retries >= minRetries && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const rollFactor = 1, none = 0, backFactor = this.roll.horizontal && this.roll.vertical ? double * rollFactor : rollFactor, backSum = this.roll.horizontal ? Math.PI * half : none, rolled = Math.floor(((this.roll.angle ?? none) + backSum) / (Math.PI / backFactor)) % double;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value), minZ = 0;\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, minZ, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size, defaultRadius = 0;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? defaultRadius,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer?.particleDestroy?.(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed?.(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed?.(this, override);\n        }\n        pathGenerator?.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    async draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            await canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        await canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** squareExp * Math.PI * half;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    async init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect?.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape?.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * millisecondsToSeconds;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                await this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const decayOffset = 1;\n        this.moveDecay = decayOffset - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer?.loadEffect) {\n            await effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer?.loadShape) {\n            await shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            await updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            await mover.init?.(this);\n        }\n        await effectDrawer?.particleInit?.(container, this);\n        await shapeDrawer?.particleInit?.(container, this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated?.(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset?.(this);\n        }\n    }\n}\n"],"names":["double","half","fixOutMode","data","isInArray","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","_this","this","_calcPosition","position","zIndex","_outModes$left","_outModes$right","_outModes$top","_outModes$bottom","tryCount","arguments","length","undefined","plugin","plugins","pluginPos","particlePosition","Vector3d","x","y","canvasSize","canvas","size","exactPosition","calcExactPositionOrRandomFromSize","pos","getRadius","outModes","options","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","increment","_calculateVelocity","res","getParticleBaseVelocity","direction","copy","moveOptions","rad","degToRad","getRangeValue","angle","radOffset","offset","range","straight","randomInRange","setRangeValue","random","speed","getRandom","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","concat","errorPrefix","particles","find","particle","getDistance","_getRollColor","color","_this$roll$angle","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","floor","alterHsl","type","_initPosition","_this$options$move$ce","_this$options$move$ce2","zIndexValue","clamp","zLayers","initialPosition","moveCenter","getPosition","center","mode","getParticleDirectionAngle","outType","Vector","_engine","destroy","override","_shapeDrawer$particle","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","shape","particleDestroy","call","_plugin$particleDestr","particleDestroyed","updater","updaters","_updater$particleDest","reset","dispatchEvent","async","delta","drawParticlePlugin","drawParticle","getFillColor","_this$bubble$color","getHslFromAnimation","getMass","z","_this$bubble$radius","getStrokeColor","_this$bubble$color2","strokeColor","id","overrideOptions","group","_effectData$fill","_effectData$close","_shapeData$fill","_shapeData$close","_effectDrawer","_shapeDrawer","_shapeDrawer2","_effectDrawer2","_effectDrawer2$partic","_shapeDrawer3","_shapeDrawer3$particl","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","loadParticlesOptions","effectType","effect","shapeType","reduceDuplicates","itemFromSingleOrMultiple","effectOptions","shapeOptions","_overrideOptions$effe","_overrideOptions$shap","overrideEffectType","load","overrideShapeType","effectData","deepExtend","close","fill","loadEffectData","shapeData","loadShapeData","interactivity","Interactivity","pathOptions","path","pathDelay","delay","millisecondsToSeconds","generator","getPathGenerator","addPath","init","initParticle","initParticleNumericAnimationValue","factor","initialVelocity","velocity","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","effectDrawers","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","rangeColorToRgb","shadow","mover","movers","_mover$init","particleInit","_plugin$particleCreat","particleCreated","isInsideCanvas","isVisible","_updater$reset"],"sourceRoot":""}