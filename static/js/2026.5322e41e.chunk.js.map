{"version":3,"file":"static/js/2026.5322e41e.chunk.js","mappings":"qKACO,MAAMA,EACTC,cACIC,KAAKC,QAAS,EACdD,KAAKE,UAAY,IACjBF,KAAKG,QAAU,CACnB,CACAC,KAAKC,GACIA,SAGcC,IAAfD,EAAKE,QACLP,KAAKO,MAAQC,EAAAA,GAAAA,OAAoBR,KAAKO,MAAOF,EAAKE,aAElCD,IAAhBD,EAAKJ,SACLD,KAAKC,OAASI,EAAKJ,aAEAK,IAAnBD,EAAKH,YACLF,KAAKE,UAAYG,EAAKH,gBAELI,IAAjBD,EAAKF,UACLH,KAAKG,SAAUM,EAAAA,EAAAA,IAAcJ,EAAKF,UAE1C,ECtBG,MAAMO,EACTX,cACIC,KAAKW,MAAQ,IAAIb,EACjBE,KAAKY,UAAY,IAAId,CACzB,CACAM,KAAKC,GACIA,IAGLL,KAAKW,MAAMP,KAAKC,EAAKM,OACrBX,KAAKY,UAAUR,KAAKC,EAAKO,WAC7B,ECVG,MAAMC,EACTC,eAAeC,EAAUC,EAASC,EAAQd,GACtC,MAAmCe,EAAlBH,EAASI,QAAmCC,QAC7D,IAAKF,EACD,MAAO,CAAC,EAEZ,MAAME,EAAUF,EAAeN,UAAWS,EAAYD,EAAQnB,SAAUqB,EAAAA,EAAAA,MAAcF,EAAQlB,UAAWqB,EAAgBR,EAASI,QAAQK,OAAqBC,GAAH,EAA+BV,EAASW,eAAiBH,EAAcI,YAAaC,EAAmBP,GAAYQ,EAAAA,EAAAA,IAAcT,EAAQjB,SAAWsB,EAAiBtB,EAAS2B,GAAaC,EAAAA,EAAAA,IAAgBX,EAAQb,OAAQyB,EAAeF,GAAaG,EAAAA,EAAAA,IAAgBH,EAAYF,QAAoBtB,EAAW4B,EAAM,CAAC,EAAGC,EAAed,GAAaW,EAGpf,OAFAE,EAAIE,KAAOD,EAAeH,OAAe1B,EACzC4B,EAAIG,OAASF,EAAeH,OAAe1B,EACpC4B,CACX,CACAI,mBACUC,QAAQC,SAClB,CACAC,UAAU1B,GACN,MAAmCG,EAAlBH,EAASI,QAAmCC,QAC7D,QAAKF,GAGEA,EAAeN,UAAUX,MACpC,CACAyC,YAAYvB,GACHA,EAAQC,UACTD,EAAQC,QAAU,IAAIV,GACzB,QAAAiC,EAAAC,UAAAC,OAHmBC,EAAO,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAPF,EAAOE,EAAA,GAAAJ,UAAAI,GAI3B,IAAK,MAAMC,KAAUH,EACjB3B,EAAQC,QAAQhB,KAAW,OAAN6C,QAAM,IAANA,OAAM,EAANA,EAAQ7B,QAErC,CACAkB,qBACUC,QAAQC,SAClB,E","sources":["../node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js","../node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js","../node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js"],"sourcesContent":["import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n","import { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n","import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n"],"names":["TwinkleValues","constructor","this","enable","frequency","opacity","load","data","undefined","color","OptionsColor","setRangeValue","Twinkle","lines","particles","TwinkleUpdater","getColorStyles","particle","context","radius","twinkleOptions","options","twinkle","twinkling","getRandom","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","getRangeValue","twinkleRgb","rangeColorToHsl","twinkleStyle","getStyleFromHsl","res","needsTwinkle","fill","stroke","async","Promise","resolve","isEnabled","loadOptions","_len","arguments","length","sources","Array","_key","source"],"sourceRoot":""}