{"version":3,"file":"static/js/7669.d0e63897.chunk.js","mappings":"0LAIA,SAASA,EAAyBC,EAAkBC,GAC5CD,EAAiBC,MACjBD,EAAiBC,MAAMC,MAAQD,EAG/BD,EAAiBC,MAAQ,CACrBC,MAAOD,EAGnB,CACO,MAAME,EACTC,YAAYC,EAAQC,EAAUC,EAAWC,EAASC,GAAU,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,KACxDC,KAAKd,SAAWA,EAChBc,KAAKb,UAAYA,EACjBa,KAAKC,SAAW,KAAM,IAAAC,EAAAC,EACI,QAAtBD,EAAAF,KAAKI,yBAAiB,IAAAF,GAAtBA,EAAwBG,aACxBL,KAAKI,uBAAoBE,EACL,QAApBH,EAAAH,KAAKO,uBAAe,IAAAJ,GAApBA,EAAsBE,aACtBL,KAAKO,qBAAkBD,EACvBN,KAAKd,SAASsB,cAAcR,MAC5BA,KAAKS,QAAQC,cAAc,mBAAoB,CAC3CvB,UAAWa,KAAKb,UAChBwB,KAAM,CACFC,QAASZ,OAEf,EAENA,KAAKa,cAAgB,KAAM,IAAAC,EACvB,GAAId,KAAKe,QACL,OAEJ,MAAMC,OAA2CV,KAAf,QAAjBQ,EAAAd,KAAKZ,QAAQ6B,YAAI,IAAAH,OAAA,EAAjBA,EAAmBE,WAAyBE,EAAAA,EAAAA,IAAclB,KAAKZ,QAAQ6B,KAAKD,eAAYV,EACrGN,KAAKb,UAAUgC,OAAOC,eACrBpB,KAAKqB,WAF0I,GAE7GrB,KAAKsB,iBAC3BhB,IAAbU,GACAA,EAJ8H,IAK9HhB,KAAKuB,UAAYP,EAAWQ,EAAAA,GAChC,EAEJxB,KAAKyB,mBAAqB,SAACC,EAAWC,EAAWC,GAAmD,IAAAC,EAAA,IAAzCC,EAAMC,UAAAC,OAAA,QAAA1B,IAAAyB,UAAA,GAAAA,UAAA,GAxCmF,EAyChJ,MAAM5C,EAAYY,EAAKZ,UACvB,IAAKuC,EAAUO,OACX,OAAON,EAEX,MAAMO,GAAcC,EAAAA,EAAAA,IAAcT,EAAUU,QAAyDC,GAAxCnB,EAAAA,EAAAA,IAAcnB,EAAKX,QAAQkD,KAAKC,OAA8Bf,EAAAA,GAAyBrC,EAAUgC,OAAOC,aACrK,OAAQO,GAD+MT,EAAAA,EAAAA,IAA6B,QAAhBW,EAACH,EAAUc,aAAK,IAAAX,EAAAA,EAA7C,GACrK1C,EAAUsD,SAAYJ,EAAaH,EAAcJ,GAAUF,CACjG,EACA5B,KAAKS,QAAUxB,EACfe,KAAK0C,iBAAmB,EACxB1C,KAAK2C,kBAAoB,EACzB3C,KAAK4C,mBAAqB,EAC1B5C,KAAK6C,iBAAmBxD,EACpBD,aAAmB0D,EAAAA,QACnB9C,KAAKZ,QAAUA,GAGfY,KAAKZ,QAAU,IAAI0D,EAAAA,QACnB9C,KAAKZ,QAAQ2D,KAAK3D,IAEtBY,KAAKgD,aACA9B,EAAAA,EAAAA,IAAqC,QAAxB5B,EAACU,KAAKZ,QAAQ6B,KAAKsB,aAAK,IAAAjD,EAAAA,EA7Db,GA6DqCkC,EAAAA,GAC1DxB,KAAKb,UAAUgC,OAAOC,aAC9BpB,KAAKX,SAAgC,QAAxBE,EAAGS,KAAK6C,wBAAgB,IAAAtD,EAAAA,EAAIS,KAAKiD,gBAC9CjD,KAAKkD,KAAOlD,KAAKZ,QAAQ8D,KACzBlD,KAAKmD,KAAOnD,KAAKZ,QAAQ+D,KACzBnD,KAAKoD,aAAepD,KAAKZ,QAAQ6B,KAAKoC,KACtCrD,KAAKsD,sBAAuB,EAC5B,IAAI1E,GAAmB2E,EAAAA,EAAAA,IAAW,CAAC,EAAGvD,KAAKZ,QAAQoE,WAanD,GAZgB,QAAhBhE,EAAAZ,SAAgB,IAAAY,IAAhBZ,EAAqB,CAAC,GACD,QAArBc,GAAAD,EAAAb,GAAiB6E,YAAI,IAAA/D,IAArBD,EAAiBgE,KAAS,CAAC,GACI,QAA/B7D,GAAAD,EAAAf,EAAiB6E,MAAKC,iBAAS,IAAA9D,IAA/BD,EAAsB+D,UAAc1D,KAAKZ,QAAQsE,WAC7C1D,KAAKZ,QAAQuE,aACb3D,KAAK2D,YAAaC,EAAAA,EAAAA,IAAgB5D,KAAKZ,QAAQuE,aAEnD3D,KAAKe,SAAWf,KAAKZ,QAAQyE,SAC7B7D,KAAKR,kBAAoBZ,EACzBoB,KAAK8D,MAAQ9D,KAAK+D,YAClB/D,KAAKgE,MAAOC,EAAAA,EAAAA,IAAQjE,KAAK8D,MAAO9D,KAAKb,UAAU+E,OAAOF,MACtDhE,KAAKqB,WAAoC,QAA1BxB,EAAGG,KAAKZ,QAAQ6B,KAAKkD,aAAK,IAAAtE,EAAAA,GA/EyE,EAgFlHG,KAAKsB,UAAYtB,KAAKqB,YAhFyB,EAiF3CrB,KAAKZ,QAAQgF,MAAO,CACpB,MAAMC,EAAUC,SAASC,eAAevE,KAAKZ,QAAQgF,OACjDC,IACArE,KAAKI,kBAAoB,IAAIoE,kBAAiB,KAC1CxE,KAAKyE,QAAQ,IAEjBzE,KAAKO,gBAAkB,IAAImE,gBAAe,KACtC1E,KAAKyE,QAAQ,IAEjBzE,KAAKI,kBAAkBuE,QAAQN,EAAS,CACpCO,YAAY,EACZC,gBAAiB,CAAC,QAAS,QAAS,YAExC7E,KAAKO,gBAAgBoE,QAAQN,GAErC,CACA,MAAMS,EAAe9E,KAAKZ,QAAQ2F,MAAOC,EAAiD,QAAnClF,EAAGE,KAAKS,QAAQwE,2BAAmB,IAAAnF,OAAA,EAAhCA,EAAkCoF,kBAAkBJ,EAAaK,MACvHH,IACAhF,KAAKoF,OAASJ,EAAeK,SAASrF,KAAKX,SAAUW,KAAKgE,KAAMhE,KAAKmD,KAAM2B,EAAa1F,UAE5FY,KAAKS,QAAQC,cAAc,iBAAkB,CACzCvB,YACAwB,KAAM,CACFC,QAASZ,QAGjBA,KAAKsF,MACT,CACAC,gBACIvF,KAAKe,SAAU,EACff,KAAKwF,OACT,CACAC,eACIzF,KAAKe,SAAU,EACff,KAAKsF,MACT,CACAI,aAAa,IAAAC,QACQ,QAAjBA,EAAM3F,KAAKoF,cAAM,IAAAO,OAAA,EAAXA,EAAaC,OACvB,CACAJ,QACQxF,KAAKe,gBAGFf,KAAK6F,UAChB,CACAP,OAAO,IAAAQ,EACH,IAAI9F,KAAKe,SAGHf,KAAKb,UAAUgC,OAAOC,eACvBpB,KAAKqB,WAnIqC,GAmIRrB,KAAKsB,YAActB,KAAKZ,QAAQ6B,KAAKkD,SACvEnE,KAAKoD,aAAepD,KAAK4C,qBAAuC,QAArBkD,EAAK9F,KAAKgD,mBAAW,IAAA8C,EAAAA,EApIC,IAkItE,CAKA,QAAwBxF,IAApBN,KAAK6F,WAA0B,CAC/B,MAAMtD,GAAQrB,EAAAA,EAAAA,IAAclB,KAAKZ,QAAQkD,KAAKC,OAC9CvC,KAAK6F,WAActD,EAAQf,EAAAA,GAAyBxB,KAAKb,UAAUgC,OAAOC,YAC9E,EACIpB,KAAKqB,WA3IsC,GA2ITrB,KAAKsB,YACvCtB,KAAKa,eANT,CAQJ,CACA4D,SAAS,IAAAsB,EACL,MAAMC,EAAkBhG,KAAK6C,iBAC7B7C,KAAKX,SACD2G,IAAmBC,EAAAA,EAAAA,IAAcD,EAAiBhG,KAAKb,UAAU+E,OAAOF,KAAMkC,EAAAA,GAAAA,QACxEF,EACAhG,KAAKiD,gBACfjD,KAAK8D,MAAQ9D,KAAK+D,YAClB/D,KAAKgE,MAAOC,EAAAA,EAAAA,IAAQjE,KAAK8D,MAAO9D,KAAKb,UAAU+E,OAAOF,MAC3C,QAAX+B,EAAA/F,KAAKoF,cAAM,IAAAW,GAAXA,EAAatB,OAAOzE,KAAKX,SAAUW,KAAKgE,KAC5C,CACA0B,aAAaS,GACT,IAAInG,KAAKe,QAAT,CAGsB,IAAAqF,EAAAC,EAAtB,GAAIrG,KAAKoD,YACLpD,KAAKoD,aAAc,EACnBpD,KAAK4C,mBAAqC,QAAnBwD,EAAGpG,KAAKgD,mBAAW,IAAAoD,EAAAA,EA/JwB,EAgKlEpG,KAAK2C,kBAAmC,QAAlB0D,EAAGrG,KAAK6F,kBAAU,IAAAQ,EAAAA,EAhKgD,EAsK5F,GAJKrG,KAAKsD,uBACNtD,KAAKsD,sBAAuB,QACtBtD,KAAKsG,eAAetG,KAAKZ,QAAQmH,kBAEpBjG,IAAnBN,KAAKuB,YACLvB,KAAK0C,kBAAoByD,EAAMrH,MAC3BkB,KAAK0C,kBAAoB1C,KAAKuB,WAAW,CAQa,IAAAiF,EAAAC,EAAtD,GAPAzG,KAAKwF,aACoBlF,IAArBN,KAAKgD,oBACEhD,KAAKgD,YAEXhD,KAAKsB,WACNtB,KAAKqB,aAELrB,KAAKqB,WAhL8B,GAgLDrB,KAAKsB,UACvCtB,KAAKX,SAAWW,KAAKiD,gBACV,QAAXuD,EAAAxG,KAAKoF,cAAM,IAAAoB,GAAXA,EAAa/B,OAAOzE,KAAKX,SAAUW,KAAKgE,MACxChE,KAAKgD,aACA9B,EAAAA,EAAAA,IAAqC,QAAxBuF,EAACzG,KAAKZ,QAAQ6B,KAAKsB,aAAK,IAAAkE,EAAAA,EApLzB,GAoLiDjF,EAAAA,GAC1DxB,KAAKb,UAAUgC,OAAOC,kBAG9BpB,KAAKC,WAETD,KAAK0C,kBAAoB1C,KAAKuB,iBACvBvB,KAAKuB,SAChB,MAEqBjB,IAArBN,KAAKgD,cACLhD,KAAK4C,oBAAsBuD,EAAMrH,MAC7BkB,KAAK4C,oBAAsB5C,KAAKgD,cAChChD,KAAKS,QAAQC,cAAc,cAAe,CACtCvB,UAAWa,KAAKb,YAEpBa,KAAKsF,OACLtF,KAAK4C,oBAAsB5C,KAAK4C,0BACzB5C,KAAKgD,mBAGI1C,IAApBN,KAAK6F,aACL7F,KAAK2C,mBAAqBwD,EAAMrH,MAC5BkB,KAAK2C,mBAAqB3C,KAAK6F,mBACzB7F,KAAK0G,QACX1G,KAAK2C,mBAAqB3C,KAAK6F,YAjDvC,CAoDJ,CACA5C,gBACI,GAAIjD,KAAKZ,QAAQgF,MAAO,CACpB,MAAMC,EAAUC,SAASC,eAAevE,KAAKZ,QAAQgF,OACrD,GAAIC,EAAS,CACT,MAAMsC,EAAStC,EAAQuC,wBAAyBC,EAAU7G,KAAKb,UAAUgC,OAAO2F,WAChF,MAAO,CACHC,GAAIJ,EAAOI,EAvNlB,GAuNsBJ,EAAOK,OAAgBH,EACtCI,GAAIN,EAAOM,EAxNlB,GAwNsBN,EAAOO,QAAiBL,EAE/C,CACJ,CACA,OAAOM,EAAAA,EAAAA,IAAmC,CACtCnD,KAAMhE,KAAKb,UAAU+E,OAAOF,KAC5B3E,SAAUW,KAAKZ,QAAQC,UAE/B,CACA0E,YAAY,IAAAqD,EACR,MAAMjI,EAAYa,KAAKb,UACvB,GAAIa,KAAKZ,QAAQgF,MAAO,CACpB,MAAMC,EAAUC,SAASC,eAAevE,KAAKZ,QAAQgF,OACrD,GAAIC,EAAS,CACT,MAAMsC,EAAStC,EAAQuC,wBACvB,MAAO,CACHI,MAAOL,EAAOK,MAAQ7H,EAAUgC,OAAO2F,WACvCI,OAAQP,EAAOO,OAAS/H,EAAUgC,OAAO2F,WACzCO,KAAM,UAEd,CACJ,CACA,OAAyB,QAAzBD,EAAQpH,KAAKZ,QAAQ4E,YAAI,IAAAoD,EAAAA,EACrB,MACI,MAAMpD,EAAO,IAAIsD,EAAAA,EAMjB,OALAtD,EAAKjB,KAAK,CACNmE,OAAQ,EACRG,KAAM,UACNL,MAAO,IAEJhD,CACV,EARD,EASR,CACA0B,cACI,GAAI1F,KAAKe,QACL,OAEJ,MAAMwG,GAAWrG,EAAAA,EAAAA,IAAclB,KAAKZ,QAAQkD,KAAKiF,gBAC3CvH,KAAKsG,eAAeiB,EAC9B,CACA7B,qBAAqB6B,GACjB,MAAMC,GAAyBC,EAAAA,EAAAA,IAAyBzH,KAAKR,mBAC7D,IAAK,IAAIkI,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CAC/B,MAAM9I,GAAmB2E,EAAAA,EAAAA,IAAW,CAAC,EAAGiE,GACxC,GAAIxH,KAAK2D,WAAY,KAAAgE,EACjB,MAAMC,EAAsC,QAA1BD,EAAG3H,KAAKZ,QAAQuE,kBAAU,IAAAgE,OAAA,EAAvBA,EAAyBjG,UAC9C,GAAIkG,EAAc,CACd,MAAMC,EAAY,CACdC,EAAG,IACHC,EAAG,IACHC,EAAG,KACJC,EAAc,IACjBjI,KAAK2D,WAAWmE,EAAI9H,KAAKyB,mBAAmBmG,EAAaE,EAAG9H,KAAK2D,WAAWmE,EAAGD,EAAUC,EAAGG,GAC5FjI,KAAK2D,WAAWoE,EAAI/H,KAAKyB,mBAAmBmG,EAAaG,EAAG/H,KAAK2D,WAAWoE,EAAGF,EAAUE,GACzF/H,KAAK2D,WAAWqE,EAAIhI,KAAKyB,mBAAmBmG,EAAaI,EAAGhI,KAAK2D,WAAWqE,EAAGH,EAAUG,EAC7F,CACArJ,EAAyBC,EAAkBoB,KAAK2D,WACpD,CACA,MAAMmB,EAAe9E,KAAKZ,QAAQ2F,MAClC,IAAI1F,EAAWW,KAAKX,SACpB,GAAIW,KAAKoF,OAAQ,CACb,MAAM8C,QAAqBlI,KAAKoF,OAAO+C,iBACvC,GAAID,EAAc,CACd7I,EAAW6I,EAAa7I,SACxB,MAAM+I,EAActD,EAAauD,QAC7BD,EAAYvJ,OAASqJ,EAAarJ,OAClCF,EAAyBC,EAAkBsJ,EAAarJ,OAExDuJ,EAAYE,UACR1J,EAAiB0J,QACjB1J,EAAiB0J,QAAQxJ,MAAQoJ,EAAaI,QAG9C1J,EAAiB0J,QAAU,CACvBxJ,MAAOoJ,EAAaI,SAIpC,MAEIjJ,EAAW,IAEnB,CACIA,SACMW,KAAKb,UAAUqE,UAAU+E,YAAYlJ,EAAUT,EAE7D,CACJ,E","sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    async update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            await this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                await this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    async _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        await this._emitParticles(quantity);\n    }\n    async _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = await this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                await this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"names":["setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","constructor","engine","emitters","container","options","position","_this$options$life$de","_this$_initialPositio","_particlesOptions","_particlesOptions2","_particlesOptions2$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$life$co","_this$_engine$emitter","_this","this","_destroy","_this$_mutationObserv","_this$_resizeObserver","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_this$options$life","_paused","duration","life","getRangeValue","retina","reduceFactor","_lifeCount","_immortal","_duration","millisecondsToSeconds","_setColorAnimation","animation","initValue","maxValue","_animation$speed","factor","arguments","length","enable","colorOffset","randomInRange","offset","emitFactor","rate","delay","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","Emitter","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","deepExtend","particles","move","direction","spawnColor","rangeColorToHsl","autoPlay","_size","_calcSize","size","getSize","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","externalPause","pause","externalPlay","async","_this$_shape","init","_emitDelay","_this$_spawnDelay","_this$_shape2","initialPosition","isPointInside","Vector","delta","_this$_spawnDelay2","_this$_emitDelay","_emitParticles","startCount","_this$_shape3","_this$options$life$de2","_emit","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","calcPositionOrRandomFromSizeRanged","_this$options$size","mode","EmitterSize","quantity","singleParticlesOptions","itemFromSingleOrMultiple","i","_this$options$spawnCo","hslAnimation","maxValues","h","s","l","colorFactor","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"sourceRoot":""}