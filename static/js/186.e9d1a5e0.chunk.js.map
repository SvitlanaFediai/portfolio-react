{"version":3,"file":"static/js/186.e9d1a5e0.chunk.js","mappings":"6JAAOA,eAAeC,EAAiBC,EAAIC,EAAIC,EAAOC,GAClD,OAAQH,EAAGI,QAAQC,WAAWC,MAC1B,IAAK,SAAU,CACX,MAAM,OAAEC,SAAiB,+BACzBA,EAAOP,EAAIC,EAAIC,EAAOC,GACtB,KACJ,CACA,IAAK,SAAU,CACX,MAAM,OAAEK,SAAiB,+BACzBA,EAAOR,EAAIC,GACX,KACJ,CACA,IAAK,UAAW,CACZ,MAAM,QAAEQ,SAAkB,+BAC1BA,EAAQT,EAAIC,GACZ,KACJ,EAER,CCfO,MAAMS,UAAiBC,EAAAA,GAC1BC,YAAYC,GACRC,MAAMD,EACV,CACAE,QACA,CACAC,OACA,CACAlB,eAAeE,EAAIE,GACf,GAAIF,EAAGiB,WAAajB,EAAGkB,SACnB,OAEJ,MAAML,EAAYM,KAAKN,UAAWO,EAAOpB,EAAGqB,cAAeC,EAAUtB,EAAGuB,YAAaC,EAAQX,EAAUY,UAAUC,SAASC,YAAYP,EAb/H,EAaqIE,GAC5I,IAAK,MAAMrB,KAAMuB,EAAO,CACpB,GAAIxB,IAAOC,IACNA,EAAGG,QAAQC,WAAWuB,QACvB5B,EAAGI,QAAQC,WAAWC,OAASL,EAAGG,QAAQC,WAAWC,MACrDL,EAAGgB,WACHhB,EAAGiB,SACH,SAEJ,MAAMW,EAAO5B,EAAGoB,cAAeS,EAAU7B,EAAGsB,YAC5C,GAAIQ,KAAKC,IAAID,KAAKE,MAAMb,EAAKc,GAAKH,KAAKE,MAAMJ,EAAKK,IAAMZ,EAAUQ,EAC9D,UAESK,EAAAA,EAAAA,IAAYf,EAAMS,GAAeP,EAAUQ,SAIlD/B,EAAiBC,EAAIC,EAAIC,EAAOW,EAAUuB,OAAOjC,WAC3D,CACJ,CACAkC,UAAUC,GACN,OAAOA,EAASlC,QAAQC,WAAWuB,MACvC,CACAW,QACA,E","sources":["../node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js"],"sourcesContent":["export async function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            const { absorb } = await import(\"./Absorb.js\");\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            const { bounce } = await import(\"./Bounce.js\");\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            const { destroy } = await import(\"./Destroy.js\");\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            await resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n"],"names":["async","resolveCollision","p1","p2","delta","pixelRatio","options","collisions","mode","absorb","bounce","destroy","Collider","ParticlesInteractorBase","constructor","container","super","clear","init","destroyed","spawning","this","pos1","getPosition","radius1","getRadius","query","particles","quadTree","queryCircle","enable","pos2","radius2","Math","abs","round","z","getDistance","retina","isEnabled","particle","reset"],"sourceRoot":""}