{"version":3,"file":"static/js/4042.91e0c18b.chunk.js","mappings":"kKACO,MAAMA,EACTC,cACIC,KAAKC,QAAS,EACdD,KAAKE,MAAQ,CACjB,CACAC,KAAKC,GACIA,SAGeC,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,aAEJI,IAAfD,EAAKF,QACLF,KAAKE,OAAQI,EAAAA,EAAAA,IAAcF,EAAKF,QAExC,ECdG,MAAMK,EACTR,cACIC,KAAKQ,OAAS,IAAIV,EAClBE,KAAKC,QAAS,EACdD,KAAKS,UAAY,IAAIX,EACrBE,KAAKU,KAAO,WACZV,KAAKW,MAAQ,EACjB,CACAR,KAAKC,GACIA,SAGkBC,IAAnBD,EAAKQ,YACLZ,KAAKY,UAAYC,EAAAA,GAAAA,OAAoBb,KAAKY,UAAWR,EAAKQ,YAE9DZ,KAAKQ,OAAOL,KAAKC,EAAKI,aACFH,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,QAEvBD,KAAKS,UAAUN,KAAKC,EAAKK,gBACPJ,IAAdD,EAAKM,OACLV,KAAKU,KAAON,EAAKM,WAEFL,IAAfD,EAAKO,QACLX,KAAKW,OAAQL,EAAAA,EAAAA,IAAcF,EAAKO,QAExC,EC3BG,MAAMG,EACTC,mBAAmBC,GAAU,IAAAC,EACzB,MAAMC,GAAoB,QAAbD,EAAAD,EAASE,YAAI,IAAAD,OAAA,EAAbA,EAAehB,SAAUe,EAASE,KAAMC,EAAiBD,GAAQA,EAAKE,WAAYC,EAAeH,GAAQA,EAAKI,SAC3H,MAAO,CACHC,EAAGJ,EAAiBK,KAAKC,IAAIP,EAAKQ,YAASrB,EAC3CsB,EAAGN,EAAeG,KAAKI,IAAIV,EAAKQ,YAASrB,EAEjD,CACAwB,WAAWb,GACP,MAAM,aAAEc,SAAuB,+BAC/BA,EAAad,EACjB,CACAe,UAAUf,GACN,MAAME,EAAOF,EAASgB,QAAQd,KAC9B,OAAQF,EAASiB,YAAcjB,EAASkB,YAAkB,OAAJhB,QAAI,IAAJA,IAAAA,EAAMjB,OAChE,CACAkC,YAAYH,GACHA,EAAQd,OACTc,EAAQd,KAAO,IAAIX,GACtB,QAAA6B,EAAAC,UAAAC,OAHmBC,EAAO,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAPF,EAAOE,EAAA,GAAAJ,UAAAI,GAI3B,IAAK,MAAMC,KAAUH,EACjBP,EAAQd,KAAKf,KAAW,OAANuC,QAAM,IAANA,OAAM,EAANA,EAAQxB,KAElC,CACAW,aAAab,EAAU2B,GACnB,IAAK3C,KAAK+B,UAAUf,GAChB,OAEJ,MAAM,WAAE4B,SAAqB,+BAC7BA,EAAW5B,EAAU2B,EACzB,E","sources":["../node_modules/@tsparticles/updater-roll/browser/Options/Classes/RollLight.js","../node_modules/@tsparticles/updater-roll/browser/Options/Classes/Roll.js","../node_modules/@tsparticles/updater-roll/browser/RollUpdater.js"],"sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n","import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nimport { RollLight } from \"./RollLight.js\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n","import { Roll } from \"./Options/Classes/Roll.js\";\nexport class RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    async init(particle) {\n        const { initParticle } = await import(\"./Utils.js\");\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const { updateRoll } = await import(\"./Utils.js\");\n        updateRoll(particle, delta);\n    }\n}\n"],"names":["RollLight","constructor","this","enable","value","load","data","undefined","setRangeValue","Roll","darken","enlighten","mode","speed","backColor","OptionsColor","RollUpdater","getTransformValues","particle","_particle$roll","roll","rollHorizontal","horizontal","rollVertical","vertical","a","Math","cos","angle","d","sin","async","initParticle","isEnabled","options","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","source","delta","updateRoll"],"sourceRoot":""}