{"version":3,"file":"static/js/6271.fe7145f5.chunk.js","mappings":"gKAEO,MAAMA,UAAkBC,EAAAA,GAC3BC,YAAYC,GACRC,MAAMD,EACV,CACAE,QACA,CACAC,OACA,CACAC,eAAeC,GACX,MAAML,EAAYM,KAAKN,eACIO,IAAvBF,EAAGG,kBACHH,EAAGG,iBAAkBC,EAAAA,EAAAA,IAAcJ,EAAGK,QAAQC,KAAKC,QAAQC,UAAYb,EAAUc,OAAOC,YAE5F,MAAMF,EAAWR,EAAGG,gBAAiBQ,EAAOX,EAAGY,cAAeC,EAAQlB,EAAUmB,UAAUC,SAASC,YAAYL,EAAMH,GACrH,IAAK,MAAMS,KAAMJ,EAAO,CACpB,GAAIb,IAAOiB,IAAOA,EAAGZ,QAAQC,KAAKC,QAAQW,QAAUD,EAAGE,WAAaF,EAAGG,SACnE,SAEJ,MAAMC,EAAOJ,EAAGL,eAAe,GAAEU,EAAE,GAAEC,IAAOC,EAAAA,EAAAA,IAAab,EAAMU,GAAOI,EAASzB,EAAGK,QAAQC,KAAKC,QAAQkB,OAAQC,EAAKJ,GAnB1G,IAmBgHG,EAAOE,GAAoBC,EAAKL,GAnBhJ,IAmBsJE,EAAOI,GAAoBC,EAAWb,EAAGc,KAAKC,MAAQhC,EAAG+B,KAAKC,MAAOC,EAnB1M,EAmBgOH,EAC3P9B,EAAGkC,SAASP,GAAKD,EAAKI,EACtB9B,EAAGkC,SAASL,GAAKD,EAAKE,EACtBb,EAAGiB,SAASP,GAAKD,EAAKO,EACtBhB,EAAGiB,SAASL,GAAKD,EAAKK,CAC1B,OACME,QAAQC,SAClB,CACAC,UAAUC,GACN,OAAOA,EAASjC,QAAQC,KAAKC,QAAQW,MACzC,CACAqB,QACA,E","sources":["../node_modules/@tsparticles/interaction-particles-attract/browser/Attractor.js"],"sourcesContent":["import { ParticlesInteractorBase, getDistances, getRangeValue, } from \"@tsparticles/engine\";\nconst attractFactor = 1000, identity = 1;\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n"],"names":["Attractor","ParticlesInteractorBase","constructor","container","super","clear","init","async","p1","this","undefined","attractDistance","getRangeValue","options","move","attract","distance","retina","pixelRatio","pos1","getPosition","query","particles","quadTree","queryCircle","p2","enable","destroyed","spawning","pos2","dx","dy","getDistances","rotate","ax","x","ay","y","p1Factor","size","value","p2Factor","velocity","Promise","resolve","isEnabled","particle","reset"],"sourceRoot":""}